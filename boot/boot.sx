#define ASM_FILE        1
        
#include "multiboot.h"
     
/* C symbol format. HAVE_ASM_USCORE is defined by configure. */
#ifdef HAVE_ASM_USCORE
# define EXT_C(sym)                     _ ## sym
#else
# define EXT_C(sym)                     sym
#endif
     
/* The size of our stack (16KB). */
#define STACK_SIZE                      0x4000
     
/* The flags for the Multiboot header. */
#ifdef __ELF__
# define MULTIBOOT_HEADER_FLAGS         0x00000003
#else
# define MULTIBOOT_HEADER_FLAGS         0x00010003
#endif

.section .data
        
.equ    BIT_PE,    0x01
        
gdt_desc:
        .long 0x00802F00
        .long 0x0000ffff
        
.bss
    .lcomm gdt_table_temp 8
        
.text
     
.globl  _start
_start:
			jmp     multiboot_entry
     
			/* Align 32 bits boundary. */
			.align  4
     
/* Multiboot header. */
multiboot_header:
			/* magic */
            .long   MULTIBOOT_HEADER_MAGIC
            /* flags */
            .long   MULTIBOOT_HEADER_FLAGS
            /* checksum */
            .long   -(MULTIBOOT_HEADER_MAGIC + MULTIBOOT_HEADER_FLAGS)
	#ifndef __ELF__
            /* header_addr */
            .long   multiboot_header
            /* load_addr */
            .long   _start
            /* load_end_addr */
            .long   _edata
            /* bss_end_addr */
            .long   _end
            /* entry_addr */
            .long   multiboot_entry
    #endif /* ! __ELF__ */
        
multiboot_entry:        
            /* Initialize the stack pointer. */
            movl    $(stack + STACK_SIZE), %esp
     
            /* Reset EFLAGS. */
            pushl   $0
            popf
     
            /* Push the pointer to the Multiboot information structure. */
            pushl   %ebx
            /* Push the magic value. */
            pushl   %eax
     
            /* Now enter the C main function... */
            call    EXT_C(cmain)

            /* load temp gdt */
        	movl  $gdt_desc, %ebx
            movl  $gdt_table_temp,  %ecx
            movl  (%ebx),  %eax
            movl  %eax, (%ecx)
            movl  4(%ebx), %eax
            movl  %eax,  4(%ecx)
            LGDT   gdt_table_temp

            /*Switch to protected mode */
            movl    %cr0,  %eax
            or      BIT_PE,  %eax
            movl    %eax,  %cr0
            movl    $0x01, %eax
            movl    %eax,   %cs
            movl    %eax,   %ds
            movl    %eax,   %es
            
                    /* Halt. */
            pushl   $halt_message
            call    EXT_C(printf)
        
loop: hlt
            jmp     loop
        
halt_message:
            .asciz  "Halted."
     
            /* Our stack area. */
            .comm   stack, STACK_SIZE
        